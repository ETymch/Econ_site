sample(1)
else
MontyHall <- function(SwitchPolicy){
prize <- sample(1:3, 1)
choice <- sample(1:3, 1)
if(prize == choice){
revealed <- setdiff(1:3, choice) %>%
sample(1)
else revealed <- setdiff(1:3, c(prize, choice))
MontyHall <- function(SwitchPolicy){
prize <- sample(1:3, 1)
choice <- sample(1:3, 1)
if(prize == choice){
revealed <- setdiff(1:3, choice) %>%
sample(1)}
else{
revealed <- setdiff(1:3, c(prize, choice))
}
if SwitchPolicy{
MontyHall <- function(SwitchPolicy){
prize <- sample(1:3, 1)
choice <- sample(1:3, 1)
if(prize == choice){
revealed <- setdiff(1:3, choice) %>%
sample(1)}
else{
revealed <- setdiff(1:3, c(prize, choice))
}
if(SwitchPolicy){
choice <- setdiff(1:3, c(prize, choice))[1]
}
return(choice == prize)
}
MontyHall(T)
MontyHall(T)
MontyHall(T)
MontyHall(T)
MontyHall(T)
MontyHall(T)
MontyHall(T)
prize <- sample(1:3, 1)
choice <- sample(1:3, 1)
if(prize == choice){
revealed <- setdiff(1:3, choice) %>%
sample(1)}
else{
if(prize == choice){
revealed <- setdiff(1:3, choice) %>%
sample(1)
else
if(prize == choice){
revealed <- setdiff(1:3, choice) %>%
sample(1)
}else{
revealed <- setdiff(1:3, c(prize, choice))
}
revealed
revealed
MontyHall <- function(SwitchPolicy){
prize <- sample(1:3, 1)
choice <- sample(1:3, 1)
if(prize == choice){
revealed <- setdiff(1:3, choice) %>%
sample(1)
}else{
revealed <- setdiff(1:3, c(prize, choice))
}
if(SwitchPolicy){
choice <- setdiff(1:3, c(prize, choice))[1]
}
return(choice == prize)
}
MontyHall(T)
library(tidyverse)
MontyHall(T)
MontyHall(T)
MontyHall(T)
MontyHall(T)
MontyHall(T)
MontyHall(F)
MontyHall(F)
MontyHall(F)
MontyHall(F)
MontyHall(F)
MontyHall(F)
N <- 100
sum(MontyHall(F) for _ in 1:N])/N)
sum(MontyHall(F) for i in 1:N])/N)
sum(MontyHall(F) for (i in 1:N)])/N)
trues <- c()
for (i in 1:N){
trues[i]<- MontyHall(T)
}
sum(trues)/N
sum(trues)/N
sum(trues)/N
trues <- c()
for (i in 1:N){
trues[i]<- MontyHall(T)
}
sum(trues)/N
setdiff(1:3, c(prize, choice))
setdiff(1:3, c(prize, choice))
prize
choice
prize <- sample(1:3, 1)
prize <- sample(1:3, 1)
choice <- sample(1:3, 1)
setdiff(1:3, c(prize, choice))
MontyHall <- function(SwitchPolicy){
prize <- sample(1:3, 1)
choice <- sample(1:3, 1)
if(prize == choice){
revealed <- setdiff(1:3, choice) %>%
sample(1)
}else{
revealed <- setdiff(1:3, c(prize, choice))
}
if(SwitchPolicy){
choice <- setdiff(1:3, c(revealed, choice))[1]
}
return(choice == prize)
}
MontyHall(T)
WinProb <- function(Switch, N){
wins <- c()
for (i in 1:N){
wins[i]<- MontyHall(T)
}
wins %>%
mean() %>%
return()
}
WinProb <- function(Switch, N){
wins <- c()
for (i in 1:N){
wins[i]<- MontyHall(Switch)
}
wins %>%
mean() %>%
return()
}
WinProb(T, 100)
WinProb(T, 1000)
WinProb(F, 100)
WinProb(T, 100)
#Давайте покажем, как вероятность выигрыша сходится к своему истинному значению при увеличении числа наблюдений!
WinProb_K <- c()
for (j in 1:K){
WinProb_K <- WinProb(T, j)
}
#Давайте покажем, как вероятность выигрыша сходится к своему истинному значению при увеличении числа наблюдений!
K = 100
WinProb_K <- c()
for (j in 1:K){
WinProb_K <- WinProb(T, j)
}
WinProb_K <- c()
for (j in 1:K){
WinProb_K[j] <- WinProb(T, j)
}
WinProb()
set.seed(123)
K = 100
WinProb_K <- c()
for (j in 1:K){
WinProb_K[j] <- WinProb(T, j)
}
WinProb(K)
WinProb_K
K = 200
WinProb_K <- c()
for (j in 1:K){
WinProb_K[j] <- WinProb(T, j)
}
WinProb_K
data.frame(P = WinProb_K,
K = seq(1, K, by = 1))
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
ggplot(aes(x = K, y = P)) +
geom_line()
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
ggplot(aes(x = K, y = P)) +
geom_line() +
theme_minimal()
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
ggplot(aes(x = K, y = P)) +
geom_line(alpha = 0.5) +
theme_minimal()
K = 1000
WinProb_K <- c()
for (j in 1:K){
WinProb_K[j] <- WinProb(T, j)
}
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
ggplot(aes(x = K, y = P)) +
geom_line(alpha = 0.5) +
theme_minimal()
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2"))
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment( aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=1.3, alpha=0.9) +
#geom_line(alpha = 0.5) +
theme_minimal()
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment( aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=1.3, alpha=0.9, legend = F) +
#geom_line(alpha = 0.5) +
theme_minimal()
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment( aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=1.3, alpha=0.9, leg = F) +
#geom_line(alpha = 0.5) +
theme_minimal()
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment( aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=1.3, alpha=0.9) +
#geom_line(alpha = 0.5) +
theme_minimal(legend = element_blank())
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5) +
#geom_line(alpha = 0.5) +
theme_minimal(legend = element_blank())
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5, show.legend = F) +
#geom_line(alpha = 0.5) +
theme_minimal(legend = element_blank())
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5, show.legend = F) +
#geom_line(alpha = 0.5) +
theme_minimal()
library(hrbrthemes)
library(sysfonts)
font.add.google('Vernon Adams')
font_add_google('Vernon Adams')
font_add_google('Vernon_Adams')
font_add_google('Monoton')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5, show.legend = F) +
#geom_line(alpha = 0.5) +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
library(showtext)
library(showtext)
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5, show.legend = F) +
#geom_line(alpha = 0.5) +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
showtext_auto()
showtext_auto()
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5, show.legend = F) +
#geom_line(alpha = 0.5) +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
library(rcartocolor)
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5, show.legend = F) +
scale_color_carto_d(palette = 'SunsetDark') +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5, show.legend = F) +
scale_color_carto_d(palette = 'Temp') +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5, show.legend = F) +
scale_color_carto_d(palette = 'Temps') +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size=0.8, alpha=0.5, show.legend = F) +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.0, alpha = 0.4, show.legend = F) +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.0, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.4)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.0, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.4 linestyle = 3)  +
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.0, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.4 type = 3)  +
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.0, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.4 style = 3)  +
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.0, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.0, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.5, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Monty Hall, and Statistics Theory')
ggsave('monty.png', dpi = 400)
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.0, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = 'Monty Hall, and Statistics Theory')
ggsave('monty.png', dpi = 400)
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 1.0, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5),
plot.background = element_rect(colour = 'white')) +
labs(title = 'Monty Hall, and Statistics Theory')
ggsave('monty.png', dpi = 400)
blogdown::stop_server()
blogdown::serve_site()
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 2.0, alpha = 0.2, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5),
plot.background = element_rect(colour = 'white')) +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 0.5, alpha = 0.2, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5),
plot.background = element_rect(colour = 'white')) +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 0.6, alpha = 0.3, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5),
plot.background = element_rect(colour = 'white')) +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 0.7, alpha = 0.3, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5),
plot.background = element_rect(colour = 'white')) +
labs(title = 'Monty Hall, and Statistics Theory')
data.frame(P = WinProb_K,
K = seq(1, K, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.66667, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.66667, yend = P, color = mycolor), size = 0.7, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.66667, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5),
plot.background = element_rect(colour = 'white')) +
labs(title = 'Monty Hall, and Statistics Theory')
library(rmarkdown)
library(knitr)
library(blogdown)
library(distill)
blogdown::serve_site()
library(rmarkdown)
library(knitr)
library(blogdown)
library(distill)
blogdown::serve_site()
library(rmarkdown)
library(knitr)
library(blogdown)
library(distill)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
library(rmarkdown)
library(knitr)
library(blogdown)
library(distill)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
library(rmarkdown)
library(knitr)
library(blogdown)
library(distill)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
library(rmarkdown)
library(knitr)
library(blogdown)
library(distill)
blogdown::serve_site()
blogdown:::preview_site()
blogdown::stop_server()
