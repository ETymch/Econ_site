blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site()
data <- read.csv('https://raw.githubusercontent.com/ETymch/Econometrics_2023/main/Datasets/201709-CAH_PulseOfTheNation.csv') %>%
mutate(GPG = G / GP) %>%
filter(GPG > 0)
library(tidyverse)
data <- read.csv('https://raw.githubusercontent.com/ETymch/Econometrics_2023/main/Datasets/201709-CAH_PulseOfTheNation.csv') %>%
mutate(GPG = G / GP) %>%
filter(GPG > 0)
data <- read.csv('https://raw.githubusercontent.com/ETymch/Econometrics_2023/main/Datasets/201709-CAH_PulseOfTheNation.csv')
income <- data$Income %>%
na.omit() %>%
as.numeric()
income %>%
density() %>%
plot(main = 'Density of Income Distribution')
income %>%
data.frame %>%
ggplot() +
geom_histogram(mapping = aes(x = income), bins = 15,
col = 'skyblue',
fill = 'green', alpha = 0.3) +
scale_x_continuous(breaks = breaks_width(50000)) +
theme_minimal()
library(scales)
income %>%
data.frame %>%
ggplot() +
geom_histogram(mapping = aes(x = income), bins = 15,
col = 'skyblue',
fill = 'green', alpha = 0.3) +
scale_x_continuous(breaks = breaks_width(50000)) +
theme_minimal()
sample(income, 10)
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n)
}
means
}
sample(income, 50, 100)
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n) %>% mean
}
means
}
sample(income, 50, 100)
sample(income, 50, 100) %>% hist()
sample(income, 100, 1000) %>% hist()
sample(income, 200, 10000) %>% hist()
sample(income, 200, 10000) %>% hist()
sample(income, 200, 10000) %>% hist()
sample(income, 200, 10000) %>% hist()
sample(income, 300, 10000) %>% hist()
sample(income, 300, 10000) %>% hist()
sample(income, 10, 10000) %>% hist()
sample(income, 50, 10000) %>% hist()
sample(income, 5, 10000) %>% hist()
sample(income, 5, 10000) %>% hist()
sample(income, 5, 10000) %>% hist()
sample(income, 5, 10000) %>% hist()
sample(income, 5, 10000) %>% hist()
sample(income, 5, 10000) %>% hist()
sample(income, 200, 10000) %>% hist()
sample(income, 200, 10000) %>% hist()
sample(income, 200, 10000) %>% hist()
sample(income, 1000, 10000) %>% hist()
sample(income, 1000, 10000) %>% hist()
sample(income, 1000, 10000) %>% hist()
sample(income, 5000, 10000) %>% hist()
sample(income, 5000, 10000) %>% hist()
sample(income, 5000, 10000) %>% hist()
sample(income, 5000, 10000) %>% hist()
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means <- (means - mean(means)) / (sd(means) * sqrt(n))
}
sample(income, 5000, 10000) %>% hist()
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means <- (means - mean(means)) / (sd(means) * sqrt(n))
}
sample(income, 5000, 10000) %>% hist()
means
sample(income, 10, 20)
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means <- (means - mean(means)) / (sd(means) * sqrt(n))
means
}
sample(income, 10, 20)
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means_n <- (means - mean(means)) / (sd(means) * sqrt(n))
means_n
}
sample(income, 10, 20)
sample(income, 10, 20)
sample(income, 10, 20)
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means_n <- (means - mean(means)) #/ (sd(means) * sqrt(n))
means_n
}
sample(income, 10, 20)
sample(income, 10, 20)
sample(income, 10, 20)
sample(income, 10, 20)
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means #/ (sd(means) * sqrt(n))
}
sample(income, 10, 20)
a <- sample(income, 10, 20)
a - mean(a)
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means <- means - mean(means) #/ (sd(means) * sqrt(n))
}
sample_means(income, 10, 10)
sampling_means(income, 10, 10)
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means <- means - mean(means) #/ (sd(means) * sqrt(n))
means
}
sampling_means(income, 10, 10)
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means <- (means - mean(means)) / (sd(means) * sqrt(n))
means
}
sampling_means(income, 10, 10)
sampling_means(income, 10, 10) %>% hist()
sampling_means(income, 100, 1000) %>% hist()
sampling_means(income, 200, 1000) %>% hist()
sampling_means(income, 200, 1000) %>%
hist(main = 'CLT works!')
sampling_means(income, 1000, 1000) %>%
hist(main = 'CLT works!')
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means <- (means - mean(means)) / sd(means)
means
}
sampling_means(income, 1000, 1000) %>%
hist(main = 'CLT works!')
sampling_means <- function(data, n, k){
means <- c()
for (i in 1:k){
means[i] <- sample(data, n, replace = T) %>% mean
}
means <- (means - mean(means)) / sd(means)  # приводим к стандартному нормальному
means
}
incomes_subsamples <- sampling_means(income, 1000, 10000)
fitdistrplus::plotdist(incomes_subsamples, histo = T, demp = T)
par(mfrpw = c(2,1))
par(mfrow = c(2,1))
fitdistrplus::plotdist(incomes_subsamples, histo = T, demp = T)
fitdistrplus::plotdist(incomes, histo = T, demp = T)
fitdistrplus::plotdist(income, histo = T, demp = T)
fitdistrplus::plotdist(incomes_subsamples, histo = T, demp = T)
fitdistrplus::plotdist(income, histo = T, demp = T)
par(mfrow = c(1,1))
descdist(income, discrete = F, boot = 500) # Распределение доходов похоже скорее на Гамма-распределение, чем на Логнормальное.
library(fitdistrplus)
descdist(income, discrete = F, boot = 500) # Распределение доходов похоже скорее на Гамма-распределение, чем на Логнормальное.
descdist(incomes_subsamples, discrete = F, boot = 500)
fit_normal <- fitdist(incomes_subsamples, 'normal')
fit_normal <- fitdist(incomes_subsamples, 'normal')
fit_normal <- fitdist(incomes_subsamples, 'norm')
fit_normal %>% summary()
bootdist(fit_normal) %>%
summary(niter = 500)
read_dta('https://github.com/ETymch/Econometrics_2023/blob/main/Datasets/final.dta?raw=true')
library(haven)
read_dta('https://github.com/ETymch/Econometrics_2023/blob/main/Datasets/final.dta?raw=true')
data <- read_dta('https://github.com/ETymch/Econometrics_2023/blob/main/Datasets/final.dta?raw=true') %>%
dplyr::select(math1, math2, math3, treat1, treat2) %>%
mutate(growth_end = math3 - math1,
growth_mid = math2 - math1)
treatment$growth_end %>% mean
treatment <- data %>%
filter(treat1 + treat2 >= 1)
notreatment <- data %>%
filter(treat1 + treat2 == 0)
treatment$growth_end %>% mean
notreatment$growth_end %>% mean
mean(treatment$growth_end) - mean(notreatment$growth_end)
sample(data, 1200)
sample(data, 1200)
sample(data, 12)
sample(data, 1)
sample(data)
sample(data,2)
sample(data[1:7],2)
sample(data[1:7],2)
sample(data$growth_end, 100
sample(data$growth_end, 100)
sample(data$growth_end, 100)
sample(data$growth_end, 1200)
sample_n(data, 10)
data %>% setdiff(sample_n(data, 10))
random_permutation <- function(data, n, k){
sample <- sample_n(data, n)
sample_c <- data %>% setdiff(sample)
m_diff <- mean(sample[['growth_end']]) - mean(sample_c[['growth_end']])
m_diff
}
random_permutation(data, 1200, 10)
random_permutation <- function(data, n, k){
m_diff <- c()
for (i in 1:k){
sample <- sample_n(data, n)
sample_c <- data %>% setdiff(sample)
m_diff[i] <- mean(sample[['growth_end']]) - mean(sample_c[['growth_end']])
}
m_diff
}
random_permutation(data, 1200, 10)
random_permutation(data, 1200, 1000)
random_permutation(data, 1200, 1000) %>% hist()
rp_result <- random_permutation(data, 1200, 1000)
rp_result %>% as.data.frame
data.frame(rp_result)
data.frame(rp_result = rp_result)
data.frame(rp_result = rp_result) %>% colnames()
data.frame(rp_result = rp_result) %>%
ggplot(aes(x = rp_result)) +
geom_demsity(alpha = 0.4)
data.frame(rp_result = rp_result) %>%
ggplot(aes(x = rp_result)) +
geom_density(alpha = 0.4)
data.frame(rp_result = rp_result) %>%
ggplot(aes(x = rp_result)) +
geom_density(alpha = 0.4, fill = '#e5b9ad', color = '#e5b9ad')
data.frame(rp_result = rp_result) %>%
ggplot(aes(x = rp_result)) +
geom_density(alpha = 0.6, fill = '#e5b9ad', color = '#e5b9ad') +
theme_grey()
data.frame(rp_result = rp_result) %>%
ggplot(aes(x = rp_result)) +
geom_density(alpha = 0.6, fill = '#e5b9ad', color = '#e5b9ad') +
theme_bw()
data.frame(rp_result = rp_result) %>%
ggplot(aes(x = rp_result)) +
geom_density(alpha = 0.6, fill = '#e5b9ad', color = '#e5b9ad') +
theme_minimal(base_family = 'Lobster') +
geom_vline(xintercept = mean(treatment$growth_end) - mean(notreatment$growth_end), col = 'lightgreen', alpha = 0.5, size = 2)
data.frame(rp_result = rp_result) %>%
ggplot(aes(x = rp_result)) +
geom_density(alpha = 0.6, fill = '#e5b9ad', color = '#e5b9ad', size = 2) +
theme_minimal(base_family = 'Lobster') +
geom_vline(xintercept = mean(treatment$growth_end) - mean(notreatment$growth_end), col = 'lightgreen', alpha = 0.5, size = 2)
data.frame(rp_result = rp_result) %>%
ggplot(aes(x = rp_result)) +
geom_density(alpha = 0.6, fill = '#e5b9ad', color = '#e5b9ad', size = 2) +
theme_minimal(base_family = 'Lobster') +
geom_vline(xintercept = mean(treatment$growth_end) - mean(notreatment$growth_end), col = 'lightgreen', alpha = 0.5, size = 2)+
labs(title = 'Результаты теста',
x = 'Разница в результатах между финальным и первым тестом',
y = 'Плотность')
sum(rp_result > 2)
sum(rp_result > mean(treatment$growth_end) - mean(notreatment$growth_end))
sum(rp_result > mean(treatment$growth_end) - mean(notreatment$growth_end)) / 1000
head(bikes)
dist_kisses <- function(n,p,k){ # Создадим функцию
means <- c() # means - пустой вектор
for (i in 1:k){ # Мы k раз
means[i] <- rbinom(n = n, prob = p, size = k) %>% mean() # добавляем в вектор means долю успехов
} # в n испытаниях по схеме Бернулли.
return(means) # и возвращаем вектор means с n наблюдениями
}
n = 100
p = 0.7
k = 1000
dist_kisses(n,p,k) %>% hist(main = 'Histogram of Kisses')
dist_kisses(n,p,k)
dist_kisses <- function(n,p,k){ # Создадим функцию
means <- c() # means - пустой вектор
for (i in 1:k){ # Мы k раз
means[i] <- rbinom(n = n, prob = p, size = k) / k %>% mean() # добавляем в вектор means долю успехов
} # в n испытаниях по схеме Бернулли.
return(means) # и возвращаем вектор means с n наблюдениями
}
n = 100
p = 0.7
k = 1000
dist_kisses(n,p,k)
dist_kisses <- function(n,p,k){ # Создадим функцию
means <- c() # means - пустой вектор
for (i in 1:k){ # Мы k раз
means[i] <- rbinom(n = n, prob = p, size = k) / k %>% mean() # добавляем в вектор means долю успехов
} # в n испытаниях по схеме Бернулли.
return(means) # и возвращаем вектор means с n наблюдениями
}
n = 100
p = 0.7
k = 1000
dist_kisses(n,p,k)
dist_kisses <- function(n,p,k){ # Создадим функцию
means <- c() # means - пустой вектор
for (i in 1:k){ # Мы k раз
means[i] <- rbinom(n = n, prob = p, size = k) / 1000 %>% mean() # добавляем в вектор means долю успехов
} # в n испытаниях по схеме Бернулли.
return(means) # и возвращаем вектор means с n наблюдениями
}
n = 100
p = 0.7
k = 1000
dist_kisses(n,p,k)
dist_kisses <- function(n,p,k){ # Создадим функцию
means <- c() # means - пустой вектор
for (i in 1:k){ # Мы k раз
means[i] <- rbinom(n = n, prob = p, size = i) /  %>% mean() # добавляем в вектор means долю успехов
n = 100
p = 0.7
k = 1000
dist_kisses(n,p,k)
dist_kisses <- function(n,p,k){ # Создадим функцию
means <- c() # means - пустой вектор
for (i in 1:k){ # Мы k раз
means[i] <- rbinom(n = n, prob = p, size = i) %>% mean() # добавляем в вектор means долю успехов
} # в n испытаниях по схеме Бернулли.
return(means) # и возвращаем вектор means с n наблюдениями
}
n = 100
p = 0.7
k = 1000
dist_kisses(n,p,k)
dist_kisses <- function(n,p,k){ # Создадим функцию
means <- c() # means - пустой вектор
for (i in 1:k){ # Мы k раз
means[i] <- rbinom(n = n, prob = p, size = i) / i %>% mean() # добавляем в вектор means долю успехов
} # в n испытаниях по схеме Бернулли.
return(means) # и возвращаем вектор means с n наблюдениями
}
n = 100
p = 0.7
k = 1000
dist_kisses(n,p,k)
dist_kisses(n,p,k) %>% plot()
dist_kisses(n,p,k) %>% hist()
dist_kisses(n,p,k) %>% hist(nbar = 20)
dist_kisses(n,p,k) %>% hist(nbar = 25)
dist_kisses(n,p,k) %>% hist(nbar = 80)
dist_kisses(n,p,k) %>% sensity %>% plot()
dist_kisses(n,p,k) %>% density %>% plot()
n = 200
p = 0.7
k = 2000
dist_kisses(n,p,k) %>% density %>% plot()
dist_kisses <- function(n,p,k){ # Создадим функцию
means <- c() # means - пустой вектор
for (i in 1:k){ # Мы k раз
means[i] <- rbinom(n = n, prob = p, size = i) %>% mean() # добавляем в вектор means долю успехов
} # в n испытаниях по схеме Бернулли.
return(means) # и возвращаем вектор means с n наблюдениями
}
n = 200
p = 0.7
k = 2000
dist_kisses(n,p,k) %>% density %>% plot()
dist_kisses(n,p,k)
dist_kisses <- function(n,p,k){ # Создадим функцию
means <- c() # means - пустой вектор
for (i in 1:k){ # Мы k раз
means[i] <- rbinom(n = n, prob = p, size = i) / i %>% mean() # добавляем в вектор means долю успехов
} # в n испытаниях по схеме Бернулли.
return(means) # и возвращаем вектор means с n наблюдениями
}
n = 200
p = 0.7
k = 2000
dist_kisses(n,p,k)
dist_kisses(n,p,k) %>% plot()
showtext::showtext.auto()
library(tidyverse)
library(hrbrthemes)
library(rcartocolor)
library(sysfonts)
library(showtext)
showtext::showtext.auto()
font.add.google('Monoton')
font_add_google('Monoton')
data.frame(P = dist_kisses(n,p,k),
K = seq(1, k, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.7, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.7, yend = P, color = mycolor), size = 0.7, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.7, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5, size = 38),
axis.title.x= element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
plot.background = element_rect(colour = 'white')
) +
labs(title = 'Monty Hall and Statistics Theory')
data.frame(P = dist_kisses(n,p,k),
K = seq(1, k, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.7, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.7, yend = P, color = mycolor), size = 0.7, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.7, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Monoton') +
theme(plot.title = element_text(hjust = 0.5, size = 38),
axis.title.x= element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
plot.background = element_rect(colour = 'white')
) +
labs(title = 'ЗБЧ: Чем больше экспериментов - тем ближе p к истинному значению')
font_add_google('Oswald')
data.frame(P = dist_kisses(n,p,k),
K = seq(1, k, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.7, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.7, yend = P, color = mycolor), size = 0.7, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.7, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Oswald') +
theme(plot.title = element_text(hjust = 0.5, size = 38),
axis.title.x= element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
plot.background = element_rect(colour = 'white')
) +
labs(title = 'ЗБЧ: Чем больше экспериментов - тем ближе p к истинному значению')
data.frame(P = dist_kisses(n,p,k),
K = seq(1, k, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.7, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.7, yend = P, color = mycolor), size = 0.7, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.7, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Oswald') +
theme(plot.title = element_text(hjust = 0.5, size = 32),
axis.title.x= element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
plot.background = element_rect(colour = 'white')
) +
labs(title = 'ЗБЧ: Чем больше экспериментов - тем ближе p к истинному значению')
font_add_google('Pacifico')
data.frame(P = dist_kisses(n,p,k),
K = seq(1, k, by = 1)) %>%
mutate(mycolor = ifelse(P > 0.7, "type1", "type2")) %>%
ggplot(aes(x = K, y = P)) +
geom_segment(aes(x = K, xend = K, y = 0.7, yend = P, color = mycolor), size = 0.7, alpha = 0.4, show.legend = F) +
geom_hline(yintercept = 0.7, size = 0.2, alpha = 0.3)  +
scale_color_carto_d(palette = 'TealRose') +
theme_minimal(base_family = 'Pacifico') +
theme(plot.title = element_text(hjust = 0.5, size = 32),
axis.title.x= element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
plot.background = element_rect(colour = 'white')
) +
labs(title = 'ЗБЧ: Чем больше экспериментов - тем ближе p к истинному значению')
error_mean <- function(n,p,k){
error <- c() # error - пустой вектор
for (j in 1:k){ # для j от 1 до k
error[j] <- p - mean(dist_kisses(n,p,j)) # error = отклонению среднего в k экспериментах
} # от теоретического среднего
return(error)
}
convergence_proof <- error_mean(40, 0.7, 1000) # проведём эксперимент с поцелуями 50 девушек/парней 1000 раз.
dist_kisses(n,p,k) %>% mean()
blogdown::serve_site()
