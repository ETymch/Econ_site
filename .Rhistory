bikes_test <- read.csv('train_bikes.csv')
bikes_train <- read.csv('train_bikes.csv')
bikes_test <- read.csv('train_bikes.csv')
mod_p %>% stargazer(type = 'text')
mod_p$coefficients[1] %>% exp()
mod_p$coefficients[2] %>% exp()
mod_p$coefficients[1] - mod_p$coefficients[2] %>% exp()
(mod_p$coefficients[1] - mod_p$coefficients[2]) %>% exp()
library(tidyverse)
library(AER)
library(stargazer)
data("CigarettesSW")
?CigarettesSW
data <- CigarettesSW %>%
filter(year == 1995) %>%
mutate(Sales_Tax = taxs - tax) # долл на пачку.
# Naive OLS
naive <- lm(packs ~ log(income) + price + Sales_Tax, data)
stargazer(naive, type = 'text')
cig_s1 <- lm(price ~ Sales_Tax, data)
stargazer(cig_s1, type = 'text')
data
fitted_s1 <- cig_s1$fitted.values
lm(packs ~ price, data)
cig_s2 <- lm(log(data$packs) ~ log(data$income) + fitted_s1)
stargazer(naive, cig_s2, type = 'text')
cig_s2 <- lm(data$packs ~ log(data$income) + fitted_s1)
stargazer(naive, cig_s2, type = 'text')
naive <- lm(packs ~ log(income) + Sales_Tax, data)
stargazer(naive, type = 'text')
cig_s1 <- lm(price ~ Sales_Tax, data)
stargazer(cig_s1, type = 'text')
data
fitted_s1 <- cig_s1$fitted.values
lm(packs ~ price, data)
cig_s2 <- lm(data$packs ~ log(data$income) + fitted_s1)
stargazer(naive, cig_s2, type = 'text')
stargazer(cig_s1, type = 'text')
blogdown:::preview_site()
library(tidyverse)
library(tempdisagg)
library(seasonal)
library(astsa)
library(xts)
library(forecast)
library(imputeTS)
library(lubridate)
library(mFilter)
setwd("C:/Users/evgen/Project_Forecast_Dashboard/4q2022")
cpi <- readRDS('33568.RDS')
colnames(cpi)[3] <- 'VP'
colnames(cpi)[1] <- 'Region'
cpi <- cpi %>% filter(VP == 'К предыдущему месяцу', Region == 'Российская Федерация') %>%
select(Znacheniye) %>%
ts(start = c(2003, 1), frequency = 12) %>%
window(start = c(2014, 1)) #%>%
#seas() %>%
#final()
cpi_i <- c()
cpi_i[1] <- cpi[1]
for (i in 2:length(cpi)){
cpi_i[i] <- cpi_i[i-1] * (cpi[i]/100)
}
cpi <- cpi_i %>% ts(start = c(2014, 1), frequency = 12)
####################################################
## Номинальные и реальные доходы на душу населения #
####################################################
ai <- readRDS('57039.RDS')
colnames(ai)[1:2] <- c('VP', 'Region')
ai <- ai %>% filter(Region == 'Российская Федерация', Period %in% c('I квартал', 'II квартал', 'III квартал', 'IV квартал')) %>%
select(Znacheniye) %>%
ts(start = c(2013, 1), frequency = 4) %>%
window(start = c(2014, 1))
ai
cpi_i <- cpi_i %>% ts(start = c(2014, 1), frequency = 12) %>% aggregate(nfrequency = 4, mean) %>%
window(start = c(2014, 1))
cpi_i <- cpi_i / cpi_i[1]
ai_real <- (ai / cpi_i) %>%
seas() %>%
final()
ai_real_k <- Kfilter(ai_real, A = 1, mu0 = ai_real[1], Sigma0 = 1, Phi = 1, sQ = 1, sR = 0.6)
ai_real_k <- ai_real_k$Xf %>% as.numeric() %>% ts(start = c(2014,1), freq = 4)
ai_real_hp <- hpfilter(ai_real, freq = 1)
ai_real_hp <- ai_real_hp$trend %>% ts(start = c(2014, 1), freq = 4)
ai_real_hp_k <- 0.2 * ai_real_k + 0.8 * ai_real_hp
rri <- read.csv('rri.csv', sep = ';', dec = ',', title = F) %>%
ts(start = c(2015,1), frequency = 1)
rri <- read.csv('rri.csv', sep = ';', dec = ',') %>%
ts(start = c(2015,1), frequency = 1)
rri
rri <- read.csv('rri.csv', sep = ';', dec = ',', header = F) %>%
ts(start = c(2015,1), frequency = 1)
rri
td(rri ~ ai_real_hp_k, method = ' chow-lin')
td(rri ~ ai_real_hp_k, method = 'chow-lin')
?td
td(rri ~ ai_real_hp_k, method = 'chow-lin-maxlog')
td(rri ~ ai_real_hp_k, method = 'chow-lin-maxlog') %>%
predict()
rri
td(rri ~ ai_real_hp_k, method = 'litterman-maxlog') %>%
predict()
td(rri ~ 0+ ai_real_hp_k, method = 'litterman-maxlog') %>%
predict()
plot(ai_real, col = 'red')
library(tidyverse)
library(stargazer) # Уже знакомая вам библиотека для создания табличек с модельной статистикой.
train <- read.csv('https://github.com/ETymch/Econometrics_2023/raw/main/Datasets/Stars_train.csv') # Выборка для оценки моделей
?kmeans()
train %>%
select(Temperature, Spectral_Class) %>%
kmeans()
train %>%
select(Temperature, Spectral_Class) %>%
kmeans(centers = 6)
train %>%
select(Temperature, Spectral_Class) %>%
as.matrix() %>%
kmeans(centers = 6)
k <- train %>%
select(Temperature, Spectral_Class) %>%
as.matrix() %>%
kmeans(centers = 6)
k
train %>%
select(Temperature, Spectral_Class)
k <- train %>%
select(Temperature, as.factor(Spectral_Class)) %>%
kmeans(centers = 6)
k <- train %>%
select(Temperature, R) %>%
kmeans(centers = 6)
k
k$cluster
train$cluster <- k$cluster
train %>%
ggplot(aes(x = Temperature, y = R)) +
geom_point()
train %>%
ggplot(aes(x = Temperature, y = R, color = cluster)) +
geom_point(size = 2) +
theme_minimal()
train %>%
ggplot(aes(x = Temperature, y = R, color = cluster)) +
geom_point(size = 2) +
scale_color_viridis_d() _
train %>%
ggplot(aes(x = Temperature, y = R, color = cluster)) +
geom_point(size = 2) +
scale_color_viridis_d() +
theme_minimal()
train %>%
ggplot(aes(x = Temperature, y = R, color = cluster)) +
geom_point(size = 2) +
scale_color_viridis_c() +
theme_minimal()
train %>%
ggplot(aes(x = Temperature, y = R, color = as.factor(cluster))) +
geom_point(size = 2) +
scale_color_viridis_d() +
theme_minimal()
train %>%
ggplot(aes(x = Temperature, y = R, color = as.factor(cluster))) +
geom_point(size = 4) +
scale_color_viridis_d() +
theme_minimal()
k <- train %>%
select(Temperature/10, R) %>%
kmeans(centers = 6)
k <- train %>%
select(Temperature, R) %>%
kmeans(centers = 6)
k <- train %>%
select(Temperature -mean(train(Temperature)) / sd(train$Temperature), R) %>%
kmeans(centers = 6)
k <- train %>%
mutate(temp_n = (Temperature - mean(temperature)) / sd(Temperature),
R_n = (R - mean(R)) / sd(R) )
k <- train %>%
mutate(temp_n = (Temperature - mean(Temperature)) / sd(Temperature),
R_n = (R - mean(R)) / sd(R) )
k <- train %>%
mutate(temp_n = (Temperature - mean(Temperature)) / sd(Temperature),
R_n = (R - mean(R)) / sd(R) ) %>%
select(temp_n, R_n) %>%
kmeans(centers = 6)
train$cluster <- k$cluster
train %>%
ggplot(aes(x = Temperature, y = R, color = as.factor(cluster))) +
geom_point(size = 4) +
scale_color_viridis_d() +
theme_minimal()
library(tidyverse)
library(nnet) # Библиотека для оценки мультиномиальной логистической модели.
library(stargazer) # Уже знакомая вам библиотека для создания табличек с модельной статистикой.
train <- read.csv('https://github.com/ETymch/Econometrics_2023/raw/main/Datasets/Stars_train.csv') # Выборка для оценки моделей
View(train)
train %>%
ggplot(aes(x = R, y = Temperature))+
geom_point()
train$Temperature
a <- (train$Temperature - mean(train$Temperature) / sd(train$Temperature))
a %>% density %>% plot()
a <- (train$Temperature - mean(train$Temperature)) / sd(train$Temperature)
a %>% density %>% plot()
k <- train %>%
mutate(temp_n = (Temperature - mean(Temperature)) / sd(Temperature),
R_n = (R - mean(R)) / sd(R) ) %>%
select(temp_n, R_n) %>%
kmeans(centers = 6)
train$cluster <- k$cluster
k
train %>%
ggplot(aes(x = Temperature, y = R, color = as.factor(cluster))) +
geom_point(size = 4) +
scale_color_viridis_d() +
theme_minimal()
train %>%
ggplot(aes(x = Temperature, y = R, color = as.factor(cluster))) +
geom_point(size = 4, alpha = 0.5) +
scale_color_viridis_d() +
theme_minimal()
train %>%
ggplot(aes(x = Temperature, y = R, color = as.factor(cluster))) +
geom_point(size = 4) +
scale_color_viridis_d() +
theme_minimal()
View(train)
train %>%
ggplot(aes(x = Temperature, y = R)) +
geom_point(size = 4) +
scale_color_viridis_d() +
theme_minimal()
train %>%
ggplot(aes(x = Temperature, y = R, color = as.factor(cluster))) +
geom_point(size = 4) +
scale_color_viridis_d() +
theme_minimal()
library(rio)
library(tidyverse)
library(stargazer)
setwd("C:/Users/evgen/econometrics_2023")
angrist <- rio::import('cwhsc_new.dta') %>%
mutate(drafted_high = ifelse(interval <= 20, 1, 0)
)
View(angrist)
angrist %>%
ggplot(aes(x = interval, y = ps_r)) +
geom_point()
lm(earnings ~ pr_r + race, data = train)
lm(earnings ~ pr_r + race, data = angrist)
lm(earnings ~ ps_r + race, data = angrist)
mod_naive M- lm(earnings ~ ps_r + race, data = angrist)
mod_naive <- lm(earnings ~ ps_r + race, data = angrist)
stargazer(mod_naive, type = 'text')
iv_1 <- lm(ps_r ~ drafted_high, angrist)
iv_1
stargazer(iv_1, type = 'text')
iv_1$fitted.values
iv_1f <- iv_1$fitted.values
lm(earnings ~ iv_1f + race, data = angrist)
mod_iv <- lm(earnings ~ iv_1f + race, data = angrist)
stargazer(mod_naive, mov_iv, type = 'text')
stargazer(mod_naive, mod_iv, type = 'text')
angrist_50 <- angrist %>%
filter(byr == 50, year == 80)
angrist_51 <- angrist %>%
filter(byr == 51, year == 80)
angrist_52 <- angrist %>%
filter(byr == 52, year == 80)
angrist_53 <- angrist %>%
filter(byr == 53, year == 80)
mod_50 <- lm(log(earnings) ~ ps_r + race, weights = iweight, angrist_50) # Доходы ~ Доля призванных в группе.
mod_51 <- lm(log(earnings) ~ ps_r + race, weights = iweight, angrist_51) # Доходы ~ Доля призванных в группе.
mod_52 <- lm(log(earnings) ~ ps_r + race, weights = iweight, angrist_52) # Доходы ~ Доля призванных в группе.
mod_53 <- lm(log(earnings) ~ ps_r + race, weights = iweight, angrist_53) # Доходы ~ Доля призванных в группе.
stargazer(mod_50, mod_51, mod_52, mod_53, type = 'text')
angrist$earnings %>% density %>% plot()
angrist$earnings %>%
log() %>%
density %>%
plot()
mod_52 <- lm(log(earnings) ~ ps_r + race, weights = iweight, angrist_52)
mod_52_iv <- lm(ps_r ~ drafted_high, weights = iweight, angrist_52)
stargazer(mod_52_iv, type = 'text')
mod_52_iv <- lm(ps_r ~ drafted_high, weights = iweight, angrist_52) %>% fitted()
mod_52_1 <- lm(log(earnings) ~ mod_52_iv + race, weights = iweight, angrist_52)
mod_52 %>% stargazer(mod_52_1, type = 'text')
library(tidyverse)
library(AER)
library(stargazer)
data("CigarettesSW")
data <- CigarettesSW %>%
filter(year == 1995) %>%
mutate(Sales_Tax = taxs - tax) # долл на пачку.
View(CigarettesSW)
data <- CigarettesSW %>%
filter(year == 1995) %>%
mutate(Sales_Tax = taxs - tax) # долл на пачку.
View(data)
naive <- lm(packs ~ log(income) + Sales_Tax, data)
stargazer(naive, type = 'text')
data %>%
ggplot(aex(x = Price, y = packs)) +
geom_point()
data %>%
ggplot(aex(x = price, y = packs)) +
geom_point()
data %>%
ggplot(aes(x = price, y = packs)) +
geom_point()
data %>%
ggplot(aes(x = price, y = packs)) +
geom_point() +
geom_smooth(method = 'lm')
data %>%
ggplot(aes(x = price, y = packs)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_minimal()
P1 <- data %>%
ggplot(aes(x = price, y = packs)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_minimal()
P2 <- data %>%
ggplot(aes(x = Sales_Tax, y = packs)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_minimal()
library(pstchwork)
P1 | P2
library(patchwork)
P1 | P2
cig_s1 <- lm(price ~ Sales_Tax, data)
stargazer(cig_s1, type = 'text')
data
fitted_s1 <- cig_s1$fitted.values
lm(packs ~ price, data)
cig_s2 <- lm(data$packs ~ log(data$income) + fitted_s1)
stargazer(naive, cig_s2, type = 'text')
bikes_train <- read.csv('train_bikes.csv')
bikes_test <- read.csv('train_bikes.csv')
View(bikes_test)
bikes_train <- read.csv('train_bikes.csv')
bikes_test <- read.csv('train_bikes.csv')
bikes_test <- read.csv('test_bikes.csv')
bikes_train$count %>% density %>% plot()
colnames(bikes_train)
mod_) <- glm(count ~ humidity + season, family = poisson, bikes_train)
mod_0 <- glm(count ~ humidity + season, family = poisson, bikes_train)
mod_1 <-glm(count ~ humidity + season + atemp + windspeed, family = poisson, bikes_train)
mod_2 <-glm(count ~ humidity + season + atemp + windspeed + workingday, family = poisson, bikes_train)
stargazer(mod_0, mod_1, mod_2, type = 'text')
pr_1 <- predict(mod_0, bikes_test[-count])
pr_1 <- predict(mod_0, bikes_test %>% select(-count))
bikes_train <- read.csv('train_bikes.csv')
bikes_test <- read.csv('test_bikes.csv')
pr_1 <- predict(mod_0, bikes_test)
pr_0 <- predict(mod_0, bikes_test)
pr_1 <- predict(mod_1, bikes_test)
pr_2 <- predict(mod_2, bikes_test)
pr_0 <- predict(mod_0, bikes_test) %>% exp()
pr_1 <- predict(mod_1, bikes_test) %>% exp()
pr_2 <- predict(mod_2, bikes_test) %>% exp()
tibble(pr_0, pr_1, pr_2, id = 1:length(train))
tibble(pr_0, pr_1, pr_2, id = seq(1, 6493, by = 1))
library(reshape2)
tibble(pr_0, pr_1, pr_2, id = seq(1, 6493, by = 1)) %>%
melt(id = 'id')
tibble(pr_0, pr_1, pr_2, id = seq(1, 6493, by = 1)) %>%
melt(id = 'id') %>%
ggplot(aes(x = variable, y = value)) +
geom_point()
tibble(pr_0, pr_1, pr_2, id = seq(1, 6493, by = 1)) %>%
melt(id = 'id') %>%
ggplot(aes(x = variable, y = value)) +
geom_jitter()
tibble(pr_0, pr_1, pr_2, id = seq(1, 6493, by = 1)) %>%
melt(id = 'id') %>%
ggplot(aes(x = id, y = value)) +
facet_wrap(~variable) +
geom_jitter()
tibble(pr_0, pr_1, pr_2, id = seq(1, 6493, by = 1)) %>%
melt(id = 'id') %>%
ggplot(aes(x = id, y = value)) +
facet_wrap(~variable) +
geom_point()
blogdown:::preview_site()
setwd("C:/Users/evgen/econometrics_2023/HW 5")
library(causaldata)
library(tidyverse)
library(rio)
library(plm)
write.csv(data_housing, 'data.housing.csv')
data_housing <- read.csv('data.housing.csv')
load("C:/Users/evgen/econometrics_2023/HW 5/.RData")
View(gm)
data <- rio::import('https://github.com/ETymch/Econometrics_2023/raw/main/Datasets/BVX_annual_regdata.dta')
View(data)
data %>%
ggplot(aes(x = Rtot_real_w, y = PANIC_ind)) +
geom_point()
library(tidyverse)
data %>%
ggplot(aes(x = Rtot_real_w, y = PANIC_ind)) +
geom_point()
data$country %>% unique
data %>%
filter(country %in% c('Italy', 'Spain', 'Austria', 'Argentina')) %>%
ggplot(aes(x = Rtot_real_w, y = PANIC_ind)) +
geom_point() +
facet_wrap(~country)
data %>%
filter(country %in% c('Italy', 'Spain', 'Austria', 'Argentina')) %>%
ggplot(aes(x = Rtot_real_w, y = PANIC_ind)) +
geom_point() +
facet_wrap(~country) +
theme_bw()
data %>%
filter(country %in% c('Italy', 'Spain', 'Austria', 'Argentina')) %>%
ggplot(aes(x = Rtot_real_w, y = PANIC_ind)) +
geom_point(color = '#ad466c', size = 2) +
facet_wrap(~country) +
theme_bw() +
labs(x = 'Индекс реальной доходности собственного капитала банка',
y = 'Паника')
data %>%
filter(country %in% c('Italy', 'Spain', 'Austria', 'Argentina')) %>%
ggplot(aes(x = Rtot_real_w, y = PANIC_ind)) +
geom_point(color = '#ad466c', size = 2, alpha = 0.6) +
facet_wrap(~country) +
theme_bw() +
labs(x = 'Индекс реальной доходности собственного капитала банка',
y = 'Паника')
data %>%
filter(country %in% c('Italy', 'Spain', 'Austria', 'Argentina')) %>%
ggplot(aes(x = Rtot_real_w, y = PANIC_ind)) +
geom_point(color = '#ad466c', size = 2, alpha = 0.6) +
facet_wrap(~country) +
theme_bw(base_family = 'Lobster') +
labs(x = 'Индекс реальной доходности собственного капитала банка',
y = 'Паника')
blogdown:::preview_site()
data %>%
filter(country %in% c('Italy', 'Spain', 'Austria', 'Argentina')) %>%
ggplot(aes(x = Rtot_real_w, y = PANIC_ind)) +
geom_point(color = '#ad466c', size = 2, alpha = 0.6) +
facet_wrap(~country) +
theme_bw(base_family = 'Lobster', base_size = 10) +
labs(x = 'Индекс реальной доходности собственного капитала банка',
y = 'Паника')
library(tidyverse)
library(stargazer)
library(rio)
library(plm)
library(ggrepel)
library(sysfonts)
library(showtext)
showtext.auto()
font_add_google('Merriweather')
font_add_google('Lobster')
data_housing <- read.csv('https://raw.githubusercontent.com/ETymch/Econometrics_2023/main/Datasets/data.housing.csv') %>%
tibble()
# Посмотрим на несколько наблюдений в начале таблицы:
data_housing %>%
head()
data_housing %>%
filter(Date == '2019-10-01', # Оставляем один период в выборке
HPI <= 125) %>% # Убираем Москву, где индекс цен на жильё заметно выше, чем в других регионах.
ggplot(aes(x = HPI, y = S_unf_redone, size = GRP_pc)) + # помимо осей х и у, размер кружочка - ВРП на душу населения.
geom_point(alpha = 0.4, color = 'orange', fill = 'orange', show.legend = F) +
geom_text_repel(aes(label = Region), size = 3, max.overlaps = 7 ,show.legend = F, family = 'Lobster',
nudge_x = 0.8, nudge_y = 100) + # Авоматические подписи
theme_classic(base_family = 'Merriweather', base_size = 12) +
scale_size_continuous(range = c(3, 15)) + # Минимальный и максимальный размеры кружочков
labs(y = 'Площадь в процессе застройки, млн. м2', x = 'Индекс цен на недвижимость, г/г.', # Заголовки
title = 'Стоимость недвижимости и динамика строительства',
subtitle = '4 кв. 2019 г.',
caption = '*Размер кружка - относительный ВРП на душу населения')
ols <- lm(S_unf_redone ~ Population + HPI + CPI + GRP_pc, data = data_housing) # МНК
FE <- plm(S_unf_redone ~ Population + HPI + CPI + GRP_pc, data = data_housing,
index = c("Region"), model ="within") # Модель с фиксированными эффектами
stargazer(ols, FE, type = 'html', header = FALSE) # Сравнение моделей
gm <- read.csv('https://raw.githubusercontent.com/ETymch/Econometrics_2023/main/Datasets/gapminder.csv') %>%
as_tibble() %>%
mutate(log_GDPperCap = log(gdpPercap)) %>%
group_by(country) %>%
mutate(lifeExp_within = lifeExp - mean(lifeExp),
log_GDPperCap_within = log_GDPperCap - mean(log_GDPperCap)) %>%
ungroup()
gm %>% head()
gm %>%
filter(country %in% c('France', 'Korea, Dem. Rep.', 'Korea, Rep.', 'Albania')) %>%
ggplot(aes(x = lifeExp_within, y = log_GDPperCap_within, color = country)) +
geom_point(size = 5, alpha = 0.5) +
theme_minimal() +
facet_wrap(~country)
mod_0 <- lm(lifeExp ~ log_GDPperCap, gm)
mod_1 <- plm(lifeExp ~ log_GDPperCap, gm, index = c('country'))
stargazer(mod_0, mod_1, type = 'html', header = FALSE)
mod_2 <- plm(lifeExp ~ log_GDPperCap, gm, index = c('country', 'year'), effect = 'twoways')
stargazer(mod_0, mod_1, mod_2, type = 'html', header = FALSE)
data <- rio::import('https://github.com/ETymch/Econometrics_2023/raw/main/Datasets/BVX_annual_regdata.dta')
data %>%
filter(country %in% c('Italy', 'Spain', 'Austria', 'Argentina')) %>%
ggplot(aes(x = Rtot_real_w, y = PANIC_ind)) +
geom_point(color = '#ad466c', size = 2, alpha = 0.6) +
facet_wrap(~country) +
theme_bw(base_family = 'Lobster', base_size = 10) +
labs(x = 'Индекс реальной доходности собственного капитала банка',
y = 'Паника')
