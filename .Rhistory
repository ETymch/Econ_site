library(ggtext)
library(httr)
showtext.auto()
GET('https://github.com/ETymch/Econometrics_2023/raw/main/Plotting/HSESans-Regular.otf', write_disk('HSESans-Regular.otf', overwrite = T))
GET('https://github.com/ETymch/Econometrics_2023/raw/main/Plotting/HSESans-Bold.otf', write_disk('HSESans-Bold.otf', overwrite = T))
GET('https://github.com/ETymch/Econometrics_2023/raw/main/Plotting/HSESans-Italic.otf', write_disk('HSESans-Italic.otf', overwrite = T))
GET('https://github.com/ETymch/Econometrics_2023/raw/main/Plotting/HSESans-SemiBold.otf', write_disk('HSESans-SemiBlod.otf', overwrite = T))
font_add(family = 'HSE Sans',
regular = "HSESans-Regular.otf",
bold = 'HSESans-Bold.otf',
italic = 'HSESans-Italic.otf',
bolditalic = 'HSESans-SemiBlod.otf'
) # Установка HSE Sans, вместо bolditalic я загружаю полужирный.
data <- readxl::read_excel('services_plotting_data.xlsx')
data %>%
arrange(`Экспорт в Россию 2021`) %>%
mutate(Страна = factor(Страна, unique(Страна))) %>%
ggplot() +
geom_segment(aes(x=Страна, xend=Страна, y=`Экспорт в Россию 2021`, yend=`Экспорт в Россию 2022`), color=rgb(0.7,0.2,0.1,0.5), size = 1.4, alpha = 0.4) +
geom_point( aes(x = Страна, y=`Экспорт в Россию 2021`), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x = Страна, y=`Экспорт в Россию 2022`), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_minimal(base_family = 'HSE Sans') +
theme(
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
plot.caption = element_text(face = 'italic', size = 7),
axis.title.x = element_text(size = 8)
) +
xlab("") +
ylab("Экспорт услуг в Россию, млрд долл.") +
labs(caption = "Зелёные точки - 2021 г., красные точки - 2022 г.")
unique(all_s$Exporters)
enemies <- c('Ireland',
'Germany',
'United Kingdom',
'Netherlands',
'France',
'United States of America',
'Switzerland',
'Cyprus',
'Italy',
'Austria',
'Belgium',
'Sweden',
'Finland',
'Japan',
"Czech Republic",
"Korea, Republic of",
'Singapore',
'Luxembourg',
'Norway',
'Poland',
'Spain',
'Latvia',
"Lithuania",
'Denmark',
'Bulgaria')
all_s <- readxl::read_excel('all_services.xlsx') %>%
filter(Exporters %in% enemies) %>%
mutate(loss = (`Imported value in 2021` - `Imported value in 2022`) / 10^6) %>%
group_by(Category) %>%
summarise(loss_all = sum(loss)) %>%
mutate(Category = ifelse(Category == 'comput', 'Компьютерные', Category)) %>%
mutate(Category = ifelse(Category == 'constr', 'Строительные', Category)) %>%
mutate(Category = ifelse(Category == 'consul', 'Консалтинговые', Category)) %>%
mutate(Category = ifelse(Category == 'financ', 'Финансовые', Category)) %>%
mutate(Category = ifelse(Category == 'insura', 'Страховые', Category)) %>%
mutate(Category = ifelse(Category == 'other.', 'Прочие', Category)) %>%
mutate(Category = ifelse(Category == 'r_and_', 'R&D', Category)) %>%
mutate(Category = ifelse(Category == 'teleco', 'Телекоммуникационные', Category)) %>%
arrange(match(Category, c('Компьютерные',
"Телекоммуникационные",
'Консалтинговые',
"Страховые",
"R&D",
'Прочие',
"Строительные",
"Финансовые"))
) %>%
#arrange(desc(Category)) %>%
mutate(ypos = cumsum(loss_all) - 0.5*loss_all ) %>%
mutate(ymax = cumsum(loss_all)) %>%
mutate(ymin = c(0, head(ymax, n=-1))
) %>%
mutate(label_pos = (ymax + ymin) / 2) %>%
mutate(percent_label = paste0(Category, "\n", round(loss_all, 2)))
size_header = 15 # размер заголовка
size_text = 3 # размер названий и подписей
size_center = 12
# График всего
all_s$label_pos[7] <- 7.4
colors <- c("#2E0533",
"#661461",
"#561A39",
"#CC52AB",
"#DA66A2",
"#DA73A8",
"#DA83B0",
"#DA97BA"
)
all_s %>%
arrange(Category) %>%
ggplot(aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=Category)) +
geom_rect() +
geom_text(x=5.25, aes(y=label_pos, label=percent_label, color = Category), size=size_text, family = 'HSE Sans') +
coord_polar(theta="y") +
annotate('text', x = -1, y = 1, label = '8.03', family = 'HSE Sans', fontface = 'bold', size = size_center, alpha = 0.4, color = '#1d4f60') +
xlim(c(-1, 6)) +
#scale_color_manual(values = colors) +
#scale_fill_manual(values = colors) +
rcartocolor::scale_fill_carto_d(palette="BluGrn") +
rcartocolor::scale_color_carto_d(palette="BluGrn") +
theme_void(base_family = "HSE Sans") +
theme(plot.title = element_text(hjust = 0.5, color = '#672044', size = size_header),
plot.caption = element_text(face = 'italic'),
legend.position = "none"
) +
labs(caption = 'млрд долл.')
setwd("D:/Работа/GG_Tutorials")
df_marbles <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-02/marbles.csv')
df_marbles_rank <-
df_marbles %>%
dplyr::select(race, marble_name, team_name, points, time_s) %>%
filter(str_detect(race, "R")) %>%
group_by(race, team_name) %>%
summarize(points = unique(points)) %>%
group_by(team_name) %>%
arrange(team_name, race) %>%
mutate(
points_sum = sum(points),
points_cum = cumsum(points)
) %>%
group_by(race) %>%
arrange(-points_cum, points_sum) %>%
mutate(rank = row_number()) %>%
ungroup() %>%
mutate(
race_num = as.numeric(str_remove(race, "S1R")),
team_name = fct_reorder(team_name, -points_sum),
team_abbr = case_when(
team_name == "Savage Speeders" ~ "SAV",
team_name == "Hazers" ~ "HAZ",
team_name == "O'rangers" ~ "ORA",
team_name == "Snowballs" ~ "SNO",
team_name == "Green Ducks" ~ "GDK",
team_name == "Team Galactic" ~ "TGL",
team_name == "Team Primary" ~ "TPR",
team_name == "Team Momo" ~ "TMO",
team_name == "Thunderbolts" ~ "TDB",
team_name == "Balls of Chaos" ~ "BOC",
team_name == "Mellow Yellow" ~ "MYL",
team_name == "Midnight Wisps" ~ "MNW",
team_name == "Rojo Rollers" ~ "RJR",
team_name == "Raspberry Racers" ~ "RBR",
team_name == "Limers" ~ "LMR",
team_name == "Hornets" ~ "HOR"
)
)
cols <- c(
"#882B1A", "#676564", "#E8751A", "#779AC4", "#646E3F",
"#9D49B9", "#C09F2F", "#65955B", "#284D95", "#B34525",
"#FCD306", "#9AD1E8", "#D44F4C", "#BB1A4E", "#A5C254", "#DED32A"
)
df_marbles_rank %>%
ggplot(aes(
x = race_num,
y = rank,
color = team_name,
group = team_name
)) +
annotate(
"text",
x = 4.5,
y = 13,
label = "Marbula One",
family = "Oswald",
fontface = "bold",
color = "grey18",
size = 55
) +
geom_segment(
data = tibble(
x = 1,
xend = 8,
y = 1:16
),
aes(
x = x, xend = xend,
y = y, yend = y
),
color = "grey30",
size = .15,
inherit.aes = FALSE
) +
geom_segment(
aes(
x = 1, xend = 1,
y = 1, yend = 16
),
color = "grey30",
size = .5
) +
geom_bump(
smooth = 7,
size = 2.2
) +
geom_point(
data = df_marbles_rank %>% filter(race_num == 1),
size = 3.5
) +
geom_point(
data = df_marbles_rank %>% filter(race_num == 8),
size = 5,
shape = 21,
fill = "black",
stroke = 2
) +
geom_text(
data = df_marbles_rank %>% filter(race_num == 8),
aes(
x = 8.11,
label = team_abbr
),
family = "Oswald",
size = 5,
hjust = 0
) +
geom_text(
data = df_marbles_rank %>% filter(race_num == 8),
aes(
x = 8.48,
label = rank
),
family = "Oswald",
size = 5,
hjust = 1
) +
coord_cartesian(clip = "off") +
scale_x_continuous(
expand = c(.001, .001),
limits = c(1, 8.5),
breaks = 1:8,
labels = c(glue::glue("Race {1:7}"), "Finish"),
sec.axis = dup_axis()
) +
scale_y_reverse(
expand = c(.03, .03),
breaks = 1:16
) +
scale_color_manual(
values = cols,
guide = F
) +
labs(
x = "Marbula 1 Season 1: Championship Ranking Over Time",
caption = "Visualization by Cédric Scherer  •  Data by Jelle's Marble Runs"
)
library(ggbump)
library(showtext)
font_add_google("Oswald", "Oswald")
showtext_auto()
df_marbles_rank %>%
ggplot(aes(
x = race_num,
y = rank,
color = team_name,
group = team_name
)) +
annotate(
"text",
x = 4.5,
y = 13,
label = "Marbula One",
family = "Oswald",
fontface = "bold",
color = "grey18",
size = 55
) +
geom_segment(
data = tibble(
x = 1,
xend = 8,
y = 1:16
),
aes(
x = x, xend = xend,
y = y, yend = y
),
color = "grey30",
size = .15,
inherit.aes = FALSE
) +
geom_segment(
aes(
x = 1, xend = 1,
y = 1, yend = 16
),
color = "grey30",
size = .5
) +
geom_bump(
smooth = 7,
size = 2.2
) +
geom_point(
data = df_marbles_rank %>% filter(race_num == 1),
size = 3.5
) +
geom_point(
data = df_marbles_rank %>% filter(race_num == 8),
size = 5,
shape = 21,
fill = "black",
stroke = 2
) +
geom_text(
data = df_marbles_rank %>% filter(race_num == 8),
aes(
x = 8.11,
label = team_abbr
),
family = "Oswald",
size = 5,
hjust = 0
) +
geom_text(
data = df_marbles_rank %>% filter(race_num == 8),
aes(
x = 8.48,
label = rank
),
family = "Oswald",
size = 5,
hjust = 1
) +
coord_cartesian(clip = "off") +
scale_x_continuous(
expand = c(.001, .001),
limits = c(1, 8.5),
breaks = 1:8,
labels = c(glue::glue("Race {1:7}"), "Finish"),
sec.axis = dup_axis()
) +
scale_y_reverse(
expand = c(.03, .03),
breaks = 1:16
) +
scale_color_manual(
values = cols,
guide = F
) +
labs(
x = "Marbula 1 Season 1: Championship Ranking Over Time",
caption = "Visualization by Cédric Scherer  •  Data by Jelle's Marble Runs"
)
setwd("D:/Работа/Sanctions")
library(tidyverse) # обработка данных
library(showtext) # Рендер текста в ggplot2
library(sysfonts) # загрузка шрифтов в R
library(httr) # Скачать файлы из сети
library(ggtext) # Работа с текстом на графике
showtext_auto() # рендер текста в ggplot при помощи showtext
font_add(family = 'HSE Sans',
regular = "HSESans-Regular.otf",
bold = 'HSESans-Bold.otf',
italic = 'HSESans-Italic.otf',
bolditalic = 'HSESans-SemiBlod.otf'
) # Установка HSE Sans, вместо bolditalic я загружаю полужирный.
colors_plt <- c("#FFD54E", "#A80002") # Ц
setwd("D:/Работа/GG_Tutorials")
dat <- readxl::read_excel('fcast.xlsx') %>%
pivot_longer(Oct21:Oct23) %>% # Придаём данным подходящий вид, чтобы можно было скормить их ggplot
filter(value < 10) %>% # Уберём страны, которые переживали всплески роста или глубокие рецессии.
filter(value > -5) %>%
filter(UNFR >= -1) %>% # Уберём пропуски в данных
mutate(UNFR = as.factor(UNFR)) %>% # Дружественная или недружественная страна - факторная переменная
mutate(UNFR = ifelse(UNFR == 0, "Дружественные", 'Недружественные')) %>%  # Переименование
mutate(name = ifelse(name == 'Oct21', 'Окт 21', name)) %>% # Замена английских месяцев на русские
mutate(name = ifelse(name == 'Apr22', 'Апр 22', name)) %>%
mutate(name = ifelse(name == 'Oct22', 'Окт 22', name)) %>%
mutate(name = ifelse(name == 'Apr23', 'Апр 23', name)) %>%
mutate(name = ifelse(name == 'Oct23', 'Окт 23', name)) %>%
mutate(name = factor(name, levels = c('Окт 21', 'Апр 22', 'Окт 22', 'Апр 23', 'Окт 23'))) # Правильная последовательность
dat %>%
ggplot(aes(x = name, y = value, fill = UNFR, color = UNFR)) + # по горизонтальной оси - дата, по вертикальной - значение, цвет и заполнение - в зависимости от типа страны
geom_jitter(alpha = 0.25, size = 1.2) + # Точки - хороший способ (помимо функции плотности) иллюстрировать распределение
theme_minimal(base_family = 'HSE Sans') + # глобальный шрифт
geom_boxplot(alpha = 0.05) + # прозрачные ящики с усами
scale_color_manual(values = colors_plt) + # Цвет
theme(axis.title.y = element_blank(), # подписи оси y - не нужно
panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank(), # подписи оси x - не нужно
legend.title = element_blank(), # название легенды - тоже не нужно. Как и сама легенда в нашем случае
plot.title = element_markdown(family = "HSE Sans", color = "#333333",
size = 9, face = 'bold', hjust = 0.5
), # параметры заголовка: шрифт, цвет, размер, тип шрифта - жирный, положение - посередине.
plot.caption = element_text(face = 'italic'), # сноска с наклогом
legend.position = 'none') + # нет легенды
labs(y = '',
title = 'Пересмотры прогнозов экономического роста на 2023 г. для <b style="color:#FFD54E">дружественных</b> и <b style="color:#A80002">недружественных</b> стран', # Вместо легенды используем цвет в заголовке графика. чтобы это получилось, заголовок должен ыбть объектом element_markdown!
caption = 'Прогнозы IMF') # подпись
dat %>%
ggplot(aes(x = name, y = value, fill = UNFR, color = UNFR)) + # по горизонтальной оси - дата, по вертикальной - значение, цвет и заполнение - в зависимости от типа страны
geom_point(position=position_jitterdodge())
dat %>%
ggplot(aes(x = name, y = value, fill = UNFR, color = UNFR)) + # по горизонтальной оси - дата, по вертикальной - значение, цвет и заполнение - в зависимости от типа страны
geom_point(position=position_jitterdodge()) +
theme_minimal(base_family = 'HSE Sans') + # глобальный шрифт
geom_boxplot(alpha = 0.05) + # прозрачные ящики с усами
scale_color_manual(values = colors_plt) + # Цвет
theme(axis.title.y = element_blank(), # подписи оси y - не нужно
panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank(), # подписи оси x - не нужно
legend.title = element_blank(), # название легенды - тоже не нужно. Как и сама легенда в нашем случае
plot.title = element_markdown(family = "HSE Sans", color = "#333333",
size = 9, face = 'bold', hjust = 0.5
), # параметры заголовка: шрифт, цвет, размер, тип шрифта - жирный, положение - посередине.
plot.caption = element_text(face = 'italic'), # сноска с наклогом
legend.position = 'none') + # нет легенды
labs(y = '',
title = 'Пересмотры прогнозов экономического роста на 2023 г. для <b style="color:#FFD54E">дружественных</b> и <b style="color:#A80002">недружественных</b> стран', # Вместо легенды используем цвет в заголовке графика. чтобы это получилось, заголовок должен ыбть объектом element_markdown!
caption = 'Прогнозы IMF') # подпись
dat %>%
ggplot(aes(x = name, y = value, fill = UNFR, color = UNFR)) + # по горизонтальной оси - дата, по вертикальной - значение, цвет и заполнение - в зависимости от типа страны
geom_point(position=position_jitterdodge()) +
theme_minimal(base_family = 'HSE Sans') + # глобальный шрифт
geom_boxplot(alpha = 0.01) + # прозрачные ящики с усами
scale_color_manual(values = colors_plt) + # Цвет
theme(axis.title.y = element_blank(), # подписи оси y - не нужно
panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank(), # подписи оси x - не нужно
legend.title = element_blank(), # название легенды - тоже не нужно. Как и сама легенда в нашем случае
plot.title = element_markdown(family = "HSE Sans", color = "#333333",
size = 9, face = 'bold', hjust = 0.5
), # параметры заголовка: шрифт, цвет, размер, тип шрифта - жирный, положение - посередине.
plot.caption = element_text(face = 'italic'), # сноска с наклогом
legend.position = 'none') + # нет легенды
labs(y = '',
title = 'Пересмотры прогнозов экономического роста на 2023 г. для <b style="color:#FFD54E">дружественных</b> и <b style="color:#A80002">недружественных</b> стран', # Вместо легенды используем цвет в заголовке графика. чтобы это получилось, заголовок должен ыбть объектом element_markdown!
caption = 'Прогнозы IMF') # подпись
dat %>%
ggplot(aes(x = name, y = value, fill = UNFR, color = UNFR)) + # по горизонтальной оси - дата, по вертикальной - значение, цвет и заполнение - в зависимости от типа страны
geom_point(position=position_jitterdodge(), alpha = 0.25) +
theme_minimal(base_family = 'HSE Sans') + # глобальный шрифт
geom_boxplot(alpha = 0.01) + # прозрачные ящики с усами
scale_color_manual(values = colors_plt) + # Цвет
theme(axis.title.y = element_blank(), # подписи оси y - не нужно
panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank(), # подписи оси x - не нужно
legend.title = element_blank(), # название легенды - тоже не нужно. Как и сама легенда в нашем случае
plot.title = element_markdown(family = "HSE Sans", color = "#333333",
size = 9, face = 'bold', hjust = 0.5
), # параметры заголовка: шрифт, цвет, размер, тип шрифта - жирный, положение - посередине.
plot.caption = element_text(face = 'italic'), # сноска с наклогом
legend.position = 'none') + # нет легенды
labs(y = '',
title = 'Пересмотры прогнозов экономического роста на 2023 г. для <b style="color:#FFD54E">дружественных</b> и <b style="color:#A80002">недружественных</b> стран', # Вместо легенды используем цвет в заголовке графика. чтобы это получилось, заголовок должен ыбть объектом element_markdown!
caption = 'Прогнозы IMF') # подпись
dat %>%
ggplot(aes(x = name, y = value, fill = UNFR, color = UNFR)) + # по горизонтальной оси - дата, по вертикальной - значение, цвет и заполнение - в зависимости от типа страны
geom_point(position=position_jitterdodge(), alpha = 0.25) +
theme_minimal(base_family = 'HSE Sans') + # глобальный шрифт
geom_boxplot(alpha = 0.01, color = 'transparent') + # прозрачные ящики с усами
scale_color_manual(values = colors_plt) + # Цвет
theme(axis.title.y = element_blank(), # подписи оси y - не нужно
panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank(), # подписи оси x - не нужно
legend.title = element_blank(), # название легенды - тоже не нужно. Как и сама легенда в нашем случае
plot.title = element_markdown(family = "HSE Sans", color = "#333333",
size = 9, face = 'bold', hjust = 0.5
), # параметры заголовка: шрифт, цвет, размер, тип шрифта - жирный, положение - посередине.
plot.caption = element_text(face = 'italic'), # сноска с наклогом
legend.position = 'none') + # нет легенды
labs(y = '',
title = 'Пересмотры прогнозов экономического роста на 2023 г. для <b style="color:#FFD54E">дружественных</b> и <b style="color:#A80002">недружественных</b> стран', # Вместо легенды используем цвет в заголовке графика. чтобы это получилось, заголовок должен ыбть объектом element_markdown!
caption = 'Прогнозы IMF') # подпись
dat %>%
ggplot(aes(x = name, y = value, fill = UNFR, color = UNFR)) + # по горизонтальной оси - дата, по вертикальной - значение, цвет и заполнение - в зависимости от типа страны
geom_point(position=position_jitterdodge(), alpha = 0.25) +
theme_minimal(base_family = 'HSE Sans') + # глобальный шрифт
geom_boxplot(alpha = 0.01, fill = 'transparent') + # прозрачные ящики с усами
scale_color_manual(values = colors_plt) + # Цвет
theme(axis.title.y = element_blank(), # подписи оси y - не нужно
panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.x = element_blank(), # подписи оси x - не нужно
legend.title = element_blank(), # название легенды - тоже не нужно. Как и сама легенда в нашем случае
plot.title = element_markdown(family = "HSE Sans", color = "#333333",
size = 9, face = 'bold', hjust = 0.5
), # параметры заголовка: шрифт, цвет, размер, тип шрифта - жирный, положение - посередине.
plot.caption = element_text(face = 'italic'), # сноска с наклогом
legend.position = 'none') + # нет легенды
labs(y = '',
title = 'Пересмотры прогнозов экономического роста на 2023 г. для <b style="color:#FFD54E">дружественных</b> и <b style="color:#A80002">недружественных</b> стран', # Вместо легенды используем цвет в заголовке графика. чтобы это получилось, заголовок должен ыбть объектом element_markdown!
caption = 'Прогнозы IMF') # подпись
ggsave('plot_boxes_dots_new.svg')
ggsave('plot_boxes_dots_new.svg')
ggsave('plot_boxes_dots_new.svg')
ggsave('plot_boxes_dots_new.svg')
