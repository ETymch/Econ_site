theme_minimal
tibble(theta = x,
f1 = S(x, a, b1),
f2 = S(x, a, b2),
f3 = S(x, a, b3),
f4 = S(x, a, b4),
f5 = S(x, a, b5),
) %>%
pivot_longer(f1:f5) %>%
ggplot(aes(x = theta, y = value, color = name)) +
geom_line() +
theme_minimal()
tibble(theta = x,
f1 = S(x, a, b1),
f2 = S(x, a, b2),
f3 = S(x, a, b3),
f4 = S(x, a, b4),
f5 = S(x, a, b5),
) %>%
pivot_longer(f1:f5) %>%
ggplot(aes(x = theta, y = value, color = name)) +
geom_line() +
theme_minimal() +
theme(panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank()
)
tibble(theta = x,
f1 = S(x, a, b1),
f2 = S(x, a, b2),
f3 = S(x, a, b3),
f4 = S(x, a, b4),
f5 = S(x, a, b5),
) %>%
pivot_longer(f1:f5) %>%
ggplot(aes(x = theta, y = value, color = name)) +
geom_line() +
theme_minimal() +
theme(panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = 'bottom'
)
tibble(theta = x,
f1 = S(x, a, b1),
f2 = S(x, a, b2),
f3 = S(x, a, b3),
f4 = S(x, a, b4),
f5 = S(x, a, b5),
) %>%
pivot_longer(f1:f5) %>%
ggplot(aes(x = theta, y = value, color = name)) +
geom_line() +
theme_minimal() +
theme(panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = 'bottom',
axis.title.y = element_blank()
)
data_doom <- read.csv('https://raw.githubusercontent.com/doomlab/learnSEM/master/vignettes/data/lecture_irt.csv') %>%
na.omit()  %>% # 10 вопросов, везде ответы от 1 до 7
mutate(Q99_9 = 8 - Q99_9) # Автор сказала изменить эту переменную потому что она упорядочена задом-наперёд.
data_doom_1 <- data_doom %>%
dplyr::select(Q99_1, Q99_4, Q99_5, Q99_6, Q99_9)
data_doom_2 <- data_doom %>%
dplyr::select(Q99_2, Q99_3, Q99_7, Q99_8, Q99_10)
gpcm_doom <- mirt(data_doom_1,
model = 1, # z1 - число скрытых переменных
itemtype = 'gpcm')
data_doom <- read.csv('https://raw.githubusercontent.com/doomlab/learnSEM/master/vignettes/data/lecture_irt.csv') %>%
na.omit()  %>% # 10 вопросов, везде ответы от 1 до 7
mutate(Q99_9 = 8 - Q99_9) %>% # Автор сказала изменить эту переменную потому что она упорядочена задом-наперёд.
dplyr::select(Q99_1, Q99_4, Q99_5, Q99_6, Q99_9)
?mirt
gpcm_doom <- mirt(data_doom,
model = 1, # z1 - число скрытых переменных
itemtype = 'gpcm')
summary(gpcm_doom)
gpcm_doom <- mirt(data_doom,
model = 1, # z1 - число скрытых переменных
itemtype = 'gpcm',
irt.param = T)
summary(gpcm_doom)
coef(gpcm_doom, IRTpars = T) # Если ответы хорошо последовательны, то параметры b увеличиваются слева направо.
plot(gpcm_doom, type = 'trace')
plot(gpcm_doom, type = 'info')
mirt:fscores(gpcm_doom)
mirt::fscores(gpcm_doom)
data <- haven::read_sav('survey_839937_spss.sav')
data_mod <-
data %>%
filter(Q2_SQ001 == 'Y') %>%
select(Q3, Q6, Q9, Q17, Q19, Q22, Q26, Q12) %>%
mutate(Q3 = as.character(Q3) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q6 = as.character(Q6) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q12 = as.character(Q12) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q17 = as.character(Q17) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q19 = as.character(Q19) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q22 = ifelse(as.character(Q22) == 'F', 0, 1),
Q26 = as.character(Q26) %>%
substr(start = 2, stop = 3) %>%
as.numeric()
) %>%
mutate(Q3 = ifelse(Q3 == 1, 7, Q3)) %>%
mutate(Q3 = Q3 - 1) %>%
mutate(Q9 = Q9 %>% round(0) ) %>%
mutate(Q9 = ifelse(Q9 %in% c(1,2,3), 1, Q9),
Q9 = ifelse(Q9 %in% c(4,5), 2, Q9),
Q9 = ifelse(Q9 %in% c(6, 7), 3, Q9),
Q9 = ifelse(Q9 %in% c(8, 9), 4, Q9),
Q9 = ifelse(Q9 %in% c(10,11), 5, Q9),
Q9 = ifelse(Q9 >= 12 , 6, Q9)
) %>%
na.omit() #%>%
data_mod <-
data %>%
filter(Q2_SQ001 == 'Y') %>%
dplyr::select(Q3, Q6, Q9, Q17, Q19, Q22, Q26, Q12) %>%
mutate(Q3 = as.character(Q3) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q6 = as.character(Q6) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q12 = as.character(Q12) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q17 = as.character(Q17) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q19 = as.character(Q19) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q22 = ifelse(as.character(Q22) == 'F', 0, 1),
Q26 = as.character(Q26) %>%
substr(start = 2, stop = 3) %>%
as.numeric()
) %>%
mutate(Q3 = ifelse(Q3 == 1, 7, Q3)) %>%
mutate(Q3 = Q3 - 1) %>%
mutate(Q9 = Q9 %>% round(0) ) %>%
mutate(Q9 = ifelse(Q9 %in% c(1,2,3), 1, Q9),
Q9 = ifelse(Q9 %in% c(4,5), 2, Q9),
Q9 = ifelse(Q9 %in% c(6, 7), 3, Q9),
Q9 = ifelse(Q9 %in% c(8, 9), 4, Q9),
Q9 = ifelse(Q9 %in% c(10,11), 5, Q9),
Q9 = ifelse(Q9 >= 12 , 6, Q9)
) %>%
na.omit() #%>%
data_mod <-
data %>%
filter(Q2_SQ001 == 'Y') %>%
dplyr::select(Q3, Q6, Q9, Q17, Q19, Q22, Q26, Q12) %>%
mutate(Q3 = as.character(Q3) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q6 = as.character(Q6) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q12 = as.character(Q12) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q17 = as.character(Q17) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q19 = as.character(Q19) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q22 = ifelse(as.character(Q22) == 'F', 0, 1),
Q26 = as.character(Q26) %>%
substr(start = 2, stop = 3) %>%
as.numeric()
) %>%
mutate(Q3 = ifelse(Q3 == 1, 7, Q3)) %>%
mutate(Q3 = Q3 - 1) %>%
mutate(Q9 = Q9 %>% round(0) ) %>%
mutate(Q9 = ifelse(Q9 %in% c(1,2,3), 1, Q9),
Q9 = ifelse(Q9 %in% c(4,5), 2, Q9),
Q9 = ifelse(Q9 %in% c(6, 7), 3, Q9),
Q9 = ifelse(Q9 %in% c(8, 9), 4, Q9),
Q9 = ifelse(Q9 %in% c(10,11), 5, Q9),
Q9 = ifelse(Q9 >= 12 , 6, Q9)
) %>%
na.omit()
data <- haven::read_sav('survey_839937_spss.sav')
data_mod <-
data %>%
filter(Q2_SQ001 == 'Y') %>%
select(Q3, Q6, Q9, Q17, Q19, Q22, Q26, Q12) %>%
mutate(Q3 = as.character(Q3) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q6 = as.character(Q6) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q12 = as.character(Q12) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q17 = as.character(Q17) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q19 = as.character(Q19) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q22 = ifelse(as.character(Q22) == 'F', 0, 1),
Q26 = as.character(Q26) %>%
substr(start = 2, stop = 3) %>%
as.numeric()
) %>%
mutate(Q9 = Q9 %>% round(0) ) %>%
mutate(Q9 = ifelse(Q9 %in% c(1,2,3, 4), 1, Q9),
Q9 = ifelse(Q9 %in% c(5, 6, 7), 2, Q9),
Q9 = ifelse(Q9 %in% c(8, 9, 10, 11), 3, Q9),
Q9 = ifelse(Q9 >= 12, 4, Q9)
) %>%
na.omit() %>%
mutate(Q3 = ifelse(Q3 == 1, 7, Q3),
Q17 = ifelse(Q17 == 4, NA, Q17),
Q19 = ifelse(Q19 == 4, NA, Q19)
) %>%
mutate(Q3 = Q3 - 1) %>%
mutate(Q17 = ifelse(Q17 == 4, 0, Q17)) %>%
mutate(Q17 = ifelse(Q17 == 3, 1, Q17)) %>%
mutate(Q17 = ifelse(Q17 == 4, 3, Q17)) %>%
mutate(Q3 = ifelse(Q3 %in% c(2,3), 2, Q3),
Q3 = ifelse(Q3 %in% c(4,5), 3, Q3),
Q3 = ifelse(Q3 %in% c(6), 4, Q3)
) %>%
mutate(Q6 = ifelse(Q6 %in% c(3,4), 3, Q6),
Q6 = ifelse(Q6 %in% c(3,4), 3, Q6),
Q6 = ifelse(Q6 >=5, 4, Q6)
) %>%
mutate(Q26 = ifelse(Q26 >= 5, 4, Q26)
)
data_mod <-
data %>%
filter(Q2_SQ001 == 'Y') %>%
dplyr::select(Q3, Q6, Q9, Q17, Q19, Q22, Q26, Q12) %>%
mutate(Q3 = as.character(Q3) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q6 = as.character(Q6) %>%
substr(start = 2, stop = 2) %>%
as.numeric(),
Q12 = as.character(Q12) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q17 = as.character(Q17) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q19 = as.character(Q19) %>%
substr(start = 2, stop = 3) %>%
as.numeric(),
Q22 = ifelse(as.character(Q22) == 'F', 0, 1),
Q26 = as.character(Q26) %>%
substr(start = 2, stop = 3) %>%
as.numeric()
) %>%
mutate(Q9 = Q9 %>% round(0) ) %>%
mutate(Q9 = ifelse(Q9 %in% c(1,2,3, 4), 1, Q9),
Q9 = ifelse(Q9 %in% c(5, 6, 7), 2, Q9),
Q9 = ifelse(Q9 %in% c(8, 9, 10, 11), 3, Q9),
Q9 = ifelse(Q9 >= 12, 4, Q9)
) %>%
na.omit() %>%
mutate(Q3 = ifelse(Q3 == 1, 7, Q3),
Q17 = ifelse(Q17 == 4, NA, Q17),
Q19 = ifelse(Q19 == 4, NA, Q19)
) %>%
mutate(Q3 = Q3 - 1) %>%
mutate(Q17 = ifelse(Q17 == 4, 0, Q17)) %>%
mutate(Q17 = ifelse(Q17 == 3, 1, Q17)) %>%
mutate(Q17 = ifelse(Q17 == 4, 3, Q17)) %>%
mutate(Q3 = ifelse(Q3 %in% c(2,3), 2, Q3),
Q3 = ifelse(Q3 %in% c(4,5), 3, Q3),
Q3 = ifelse(Q3 %in% c(6), 4, Q3)
) %>%
mutate(Q6 = ifelse(Q6 %in% c(3,4), 3, Q6),
Q6 = ifelse(Q6 %in% c(3,4), 3, Q6),
Q6 = ifelse(Q6 >=5, 4, Q6)
) %>%
mutate(Q26 = ifelse(Q26 >= 5, 4, Q26)
)
data_mod
data_mod_1 <- tibble(Q3 = data_mod$Q3 %>% c(),
Q6 = data_mod$Q6 %>% c(),
Q9 = data_mod$Q9 %>% c(),
Q26 = data_mod$Q26 %>% c(),
Q12 = data_mod$Q12 %>% c()
)
data_mod_1 %>%
write.csv('data_opros.csv')
View(data)
data_mod_1 %>%
write.csv('data_opros.csv', row.names = F)
data_kuryery <- read.csv('https://raw.githubusercontent.com/ETymch/Econometrics_2023/main/Datasets/data_opros.csv')
data$Q6
data$Q9
data$Q26
data$Q12
data_kuryery <- read.csv('https://raw.githubusercontent.com/ETymch/Econometrics_2023/main/Datasets/data_opros.csv') # Из опроса курьеров я отобрал только тех,
data_quest <- data_kuryery %>%
dplyr::select(Q3, # Вопрос - сколько дней в неделю вы работвете? 1 день ~ 1. 2-3 ~ 2. 4-5 ~ 3. 6-7 ~ 4.
Q6, # На каком виде транспорта вы работаете? Пешком ~ 1. Велосипед ~ 2. Электросамокат/электровелосипед ~ 3. Автотранспорт ~ 4.
Q9, # Сколько часов в день вы работаете? 1-4 ~ 1. 5-7 ~ 2. 8-11 ~ 3. >12 ~ 4.
Q26 # # Уровень образования. Среднее ~ 1. Среднее специальное ~ 2. Высшее ~ 3. Несколько высших/учёная степень ~ 4.
)
model_1 <- mirt(data_quest,
itemtype = 'Rasch',
method = 'SEM')
model_rasch <- mirt(data_quest,
itemtype = 'Rasch',
method = 'SEM')
model_gpcm <- mirt(data_quest,
itemtype = 'gpcm',
method = 'SEM')
?mirt
model_3pl <- mirt(data_quest,
itemtype = '3PL',
method = 'SEM')
model_3pl <- mirt(data_quest,
itemtype = 'graded',
method = 'SEM')
coef(model_3pl)
coef(model_gpcm)
model_grsm <- mirt(data_quest,
itemtype = 'grsm',
method = 'SEM')
coef(model_grsm)
model_ggum <- mirt(data_quest,
itemtype = 'ggum',
method = 'SEM')
model_monopoly <- mirt(data_quest,
itemtype = 'monopoly',
method = 'SEM')
data_quest <- data_kuryery %>%
dplyr::select(Q3, # Вопрос - сколько дней в неделю вы работвете? 1 день ~ 1. 2-3 ~ 2. 4-5 ~ 3. 6-7 ~ 4.
Q6, # На каком виде транспорта вы работаете? Пешком ~ 1. Велосипед ~ 2. Электросамокат/электровелосипед ~ 3. Автотранспорт ~ 4.
Q9, # Сколько часов в день вы работаете? 1-4 ~ 1. 5-7 ~ 2. 8-11 ~ 3. >12 ~ 4.
Q26 # # Уровень образования. Среднее ~ 1. Среднее специальное ~ 2. Высшее ~ 3. Несколько высших/учёная степень ~ 4.
)
model_rasch <- mirt(data_quest,
itemtype = 'Rasch',
method = 'SEM')
model_grsm <- mirt(data_quest,
itemtype = 'grsm',
method = 'SEM')
model_gpcm <- mirt(data_quest,
itemtype = 'gpcm',
method = 'SEM')
model_ggum <- mirt(data_quest,
itemtype = 'ggum',
method = 'SEM')
model_monopoly <- mirt(data_quest,
itemtype = 'monopoly',
method = 'SEM')
results <- tibble(rasch = fscores(model_rasch) %>% c(), # прогнозы каждой модели
grcm = fscores(model_grcm) %>% c(),
gpcm = fscores(model_grsm) %>% c(),
ggum = fscores(model_ggum) %>% c(),
monopoly = fscores(model_monopoly) %>% c(),
ctt = data_quest %>% apply(1, sum), # прогноз на основе классической теории тестов. Помните метод, в котором мы просто складывали ответы на вопросы и получали итоговый счёт? Вот это он.
true = data_kuryery$Q12
)
results <- tibble(rasch = fscores(model_rasch) %>% c(), # прогнозы каждой модели
grsm = fscores(model_grcm) %>% c(),
gpcm = fscores(model_grsm) %>% c(),
ggum = fscores(model_ggum) %>% c(),
monopoly = fscores(model_monopoly) %>% c(),
ctt = data_quest %>% apply(1, sum), # прогноз на основе классической теории тестов. Помните метод, в котором мы просто складывали ответы на вопросы и получали итоговый счёт? Вот это он.
true = data_kuryery$Q12
)
results <- tibble(rasch = fscores(model_rasch) %>% c(), # прогнозы каждой модели
grsm = fscores(model_grsm) %>% c(),
gpcm = fscores(model_gpcm) %>% c(),
ggum = fscores(model_ggum) %>% c(),
monopoly = fscores(model_monopoly) %>% c(),
ctt = data_quest %>% apply(1, sum), # прогноз на основе классической теории тестов. Помните метод, в котором мы просто складывали ответы на вопросы и получали итоговый счёт? Вот это он.
true = data_kuryery$Q12
)
results %>%
ggplot(aes(x = rasch, y = gpcm)) +
geom_point() +
geom_smooth(method = 'lm')
results %>%
pivot_longer(rasch:cttm) %>%
ggplot(aes(x = as.factor(true), y = value, color = name)) +
geom_point(position = position_jitterdodge(), alpha = 0.2) +
facet_wrap(~name, scales = 'free') +
geom_boxplot(alpha = 0.25, size = .9) +
theme_minimal()
results %>%
pivot_longer(rasch:ctt) %>%
ggplot(aes(x = as.factor(true), y = value, color = name)) +
geom_point(position = position_jitterdodge(), alpha = 0.2) +
facet_wrap(~name, scales = 'free') +
geom_boxplot(alpha = 0.25, size = .9) +
theme_minimal()
results %>%
pivot_longer(rasch:ctt) %>%
ggplot(aes(x = as.factor(true), y = value, color = name)) +
geom_point(position = position_jitterdodge(), alpha = 0.2) +
facet_wrap(~name, scales = 'free') +
geom_boxplot(alpha = 0.25, size = .9) +
theme_minimal(base_family = 'HSE Sans') +
theme(panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = 'bottom',
axis.title.y = element_blank()
)
results %>%
pivot_longer(rasch:ctt) %>%
ggplot(aes(x = as.factor(true), y = value, color = name)) +
geom_point(position = position_jitterdodge(), alpha = 0.2) +
facet_wrap(~name, scales = 'free') +
geom_boxplot(alpha = 0.25, size = .9) +
theme_minimal(base_family = 'HSE Sans') +
theme(panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = 'bottom',
axis.title.y = element_blank()
) +
labs(x = 'Заработная плата')
cor(results$true, results$monopoly)
cor(results$true, results$gpcm)
cor(results$true, results$grsm)
cor(results$true, results$ctt)
cor(results$true, results$rasch)
cor(results$true, results$ggum)
tibble(cor(results$true, results$monopoly)
cor(results$true, results$gpcm)
tibble(cor(results$true, results$monopoly),
cor(results$true, results$gpcm),
cor(results$true, results$grsm),
cor(results$true, results$ctt),
cor(results$true, results$rasch),
cor(results$true, results$ggum)
)
results %>%
pivot_longer(rasch:ctt) %>%
summarize_all(funs(cor(., true)))
results %>%
pivot_longer(rasch:ctt) %>%
summarize_all(list(cor(., true)))
results %>%
pivot_longer(rasch:ctt) %>%
summarize_all(list(cor(., results$true)))
results %>%
pivot_longer(rasch:ctt) %>%
summarize_all(cor(., results$true))
results %>%
pivot_longer(rasch:ctt) %>%
summarize_all(cor(., true))
results %>%
pivot_longer(rasch:ctt) %>%
summarize_all(cor(., results$true))
str(results)
results %>%
pivot_longer(rasch:ctt) %>%
summarize_all(cor(., results$true %>% as.numetic()))
results %>%
pivot_longer(rasch:ctt) %>%
summarize_all(cor(., results$true %>% as.numeric()))
lapply(results, function(x) do.call(cor, true))
results
results$true
lapply(results, function(x) do.call(cor, results$true))
lapply(results, function(x) do.call(cor, results$true %>% list))
l <- apply(X = results, MARGIN = 1, FUN = function(x) cor.test(x[1:6], x[7]))
l <- apply(X = results, MARGIN = 1, FUN = function(x) cor.test(x[1:6], x[1:6]))
lapply(X = l, FUN = function(x) x$estimate)
l <- apply(X = results, MARGIN = 1, FUN = function(x) cor.test(x[1], x[7]))
l <- apply(X = results, MARGIN = 1, FUN = function(x) cor.test(x[1:3], x[4:6]))
lapply(X = l, FUN = function(x) x$estimate)
lapply(X = l, FUN = function(x) x$estimate) %>%unlist
library(corrr)
install.packages("corrr")
results %>% correlate() %>% focus(true)
library(corrr)
results %>%
correlate() %>%
focus(true)
palette <- c('#003f5c', '#444e86', '#955196', '#dd5182', '#ff6e54', '#ffa600')
results %>%
pivot_longer(rasch:ctt) %>%
ggplot(aes(x = as.factor(true), y = value, color = name)) +
geom_point(position = position_jitterdodge(), alpha = 0.2) +
facet_wrap(~name, scales = 'free') +
geom_boxplot(alpha = 0.25, size = .9) +
scale_color_manual(values = palette) +
theme_minimal(base_family = 'HSE Sans') +
theme(panel.grid.major.x = element_blank(), # убираем ненужную разметку
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = 'bottom',
axis.title.y = element_blank()
) +
labs(x = 'Заработная плата')
ggsave('viz_irt_kuryery.svg')
